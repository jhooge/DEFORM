runApp('~/workspace/R/shinyApps/d3NetworkExample')
runApp('~/workspace/R/shinyApps/interactivePlots')
runApp()
runApp()
head(X)
corrmatrix <- cor(X)
corrdata=as.data.frame(corrmatrix)
corrdata$Variable1=names(corrdata)
corrdatamelt=melt(corrdata,id="Variable1")
names(corrdatamelt)=c("Variable1","Variable2","CorrelationCoefficient")
library(reshape2)
corrdatamelt=melt(corrdata,id="Variable1")
names(corrdatamelt)=c("Variable1","Variable2","CorrelationCoefficient")
corrmatplot = rPlot(Variable2 ~ Variable1, color = 'CorrelationCoefficient', data = corrdatamelt, type = 'tile', height = 600)
corrmatplot$addParams(height = 400, width=800)
corrmatplot$guides("{color: {scale: {type: gradient2, lower: 'red',  middle: 'white', upper: 'blue',midpoint: 0}}}")
corrmatplot$guides(y = list(numticks = length(unique(corrdatamelt$Variable1))))
corrmatplot$guides(x = list(numticks = 3))
#corrmatplot$addParams(staggerLabels=TRUE)
corrmatplot
runApp()
str(X)
plotCorMat(X)
class(plotCorMat(X))
runApp()
str(X)
colnames(BreastCancer) <- c("Id", "CellThickness", "CellSize", "CellShape",
"MarginalAdhesion", "EpithelialCellSize", "BareNuclei",
"BlandChromatin", "NormalNucleoli", "Mitoses", "Class")
BreastCancer$CellThickness <- as.numeric(as.character(BreastCancer$CellThickness))
BreastCancer$CellSize <- as.numeric(as.character(BreastCancer$CellSize))
BreastCancer$CellShape <- as.numeric(as.character(BreastCancer$CellShape))
BreastCancer$MarginalAdhesion <- as.numeric(as.character(BreastCancer$MarginalAdhesion))
BreastCancer$EpithelialCellSize <- as.numeric(as.character(BreastCancer$EpithelialCellSize))
BreastCancer$BareNuclei <- as.numeric(as.character(BreastCancer$BareNuclei))
BreastCancer$BlandChromatin <- as.numeric(as.character(BreastCancer$BlandChromatin))
BreastCancer$NormalNucleoli <- as.numeric(as.character(BreastCancer$NormalNucleoli))
BreastCancer$Mitoses <- as.numeric(as.character(BreastCancer$Mitoses))
X     <- BreastCancer[, 2:10] ## feature matrix
Y     <- BreastCancer$Class  ## label vector
IDs <- BreastCancer$Id
preProc      <- preProcess(df, method=c("center", "scale"))
preProc      <- preProcess(X, method=c("center", "scale"))
X <- predict(preProc, X)
preProc      <- preProcess(X, method=c("knnImpute"))
X <- predict(preProc, X)
basicStats(X)
cbind(IDs, X)
X <- cbind(IDs, X)
X <- cbind(X, Y)
str(X)
setwd("~/workspace/R/projects/ShinyDashboardExample")
write.csv(X, "breastCancerProcessed.csv")
runApp()
x <- read.csv("breastCancerProcessed.csv")
x
str(x)
write.csv(X, "breastCancerProcessed.csv", row.names = F)
X <- read.csv("breastCancerProcessed.csv")
str(X)
basicStats(X)
basicStats(X[,2:ncol(X)-1])
runApp()
basicStats(X[,2:ncol(X)-1])
runApp()
runApp()
runApp()
colnames(X)
colnames(X)[-1]
colnames(X)[ncol(X)] <- "Class"
colnames(X)
write.csv(X, "breastCancerProcessed.csv", row.names = F)
colnames(X)
complete.cases(X)
!complete.cases(X)
sum(!complete.cases(X))
str(X)
sapply(X, clas)
sapply(X, class)
table(sapply(X, class))
class(table(sapply(X, class)))
table(sapply(X, class))
plot(table(sapply(X, class)))
barchart(table(sapply(X, class)))
runApp()
runApp()
runApp('~/workspace/R/shinyApps/interactivePlots')
str(X)
data <- X[, 2:ncol(X)-1]
y <- colnames(data)
mPlot(x = "date", y = y),
type = "Line", data = data)
mPlot(x = "date", y = y, type = "Line", data = data)
mPlot(x = "date", y = y[1:2], type = "Line", data = data)
p <- mPlot(x = "date", y = y[1:2], type = "Line", data = data)
p$set(pointSize = 0, lineWidth = 1)
p$addParams(dom = "chart13")
chartOutput("chart13", "morris")
print(p)
runApp()
data$MarginalAdhesion
melt(data)
head(melt(data))
runApp()
data <- X[, 2:ncol(X)-1]
y <- colnames(data)[1:2]
moltenData <- melt(data)
fig <- mPlot(x = "variable", y = "value",
type = "Line", data = data)
fig$set(pointSize = 0, lineWidth = 1)
fig$addParams(dom = "lineChart")
fig
data <- X[, 2:ncol(X)-1]
y <- colnames(data)[1:2]
moltenData <- melt(data)
fig <- mPlot(x = "variable", y = "value",
type = "Line", data = data)
fig$set(pointSize = 0, lineWidth = 1)
fig$addParams(dom = "lineChart")
fig
if (is.null(selected))
mPlot(x = "variable", y = "value", type = "Line", data = data)
mPlot(x = "variable", y = "value", type = "Line", data = moltenData)
data <- X[, 2:4]
moltenData <- melt(data)
fig <- mPlot(x = "variable", y = "value",
type = "Line", data = moltenData)
fig$set(pointSize = 0, lineWidth = 1)
fig$addParams(dom = "lineChart")
fig
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
str(econ)
head(data)
data <- X[, 1:4]
head(data)
data <- X[, 1:4]
fig <- mPlot(x = "IDs", y = colnames(data),
type = "Line", data = data)
fig$set(pointSize = 0, lineWidth = 1)
fig$addParams(dom = "lineChart")
fig
data <- X[, 1:4]
fig <- mPlot(x = "IDs", y = colnames(data)[2],
type = "Line", data = data)
fig$set(pointSize = 0, lineWidth = 1)
fig$addParams(dom = "lineChart")
fig
runApp('~/workspace/R/shinyApps/interactivePlots')
data <- X[, 1:4]
moltenData <- melt(data, id = 'IDs')
fig <- nPlot(value ~ IDs, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
fig$addParams(dom = "lineWithFocusChart")
fig
data <- X[, 1:4]
moltenData <- melt(data, id = rownames(data))
fig <- nPlot(value ~ IDs, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
fig$addParams(dom = "lineWithFocusChart")
fig
moltenData <- melt(data)
fig <- nPlot(value ~ IDs, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
fig$addParams(dom = "lineWithFocusChart")
fig
fig <- nPlot(value ~ rownames(data), group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
fig$addParams(dom = "lineWithFocusChart")
fig
data <- X[, 1:3]
moltenData <- melt(data, id="IDs")
nPlot(value ~ rownames(data), group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
nPlot(value ~ IDs, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
nPlot(IDs ~ values, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
nPlot(IDs ~ value, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
nPlot(value ~ IDs, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
nPlot(value ~ rownames(data), group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
nPlot(rownames(data) ~ value, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
nPlot(value ~ IDs, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
runApp('~/workspace/R/shinyApps/interactivePlots')
ecm <- reshape2::melt(economics[,c('date', 'uempmed', 'psavert')], id = 'date')
head(ecm)
head(data)
nPlot(value ~ date, group = 'variable', data = ecm, type = 'lineWithFocusChart')
head(moltenData)
sapply(moltenData, class)
moltenData$IDs <- as.factor(moltenData$IDs)
head(moltenData)
sapply(moltenData, class)
nPlot(value ~ IDs, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
nPlot(IDs ~ value, group = 'variable',
data = moltenData, type = 'lineWithFocusChart')
shiny::runApp()
X
bc
setwd("~/workspace/R/projects/ShinyDashboardExample")
<- read.csv("breastCancerProcessed.csv", stringsAsFactors = T)
X <- read.csv("breastCancerProcessed.csv", stringsAsFactors = T)
sapply(X, class)
table(sapply(X, class))
as.data.frame(table(sapply(X, class)))
df <- as.data.frame(table(sapply(X, class)))
colnames(df) <- c("Type", "Freq")
plotFeatureClasses <- function(df) {
df <- as.data.frame(table(sapply(X, class)))
colnames(df) <- c("Type", "Freq")
df<- df[with(df, order(-Freq)), ]
df$Type <- as.factor(df$Freq)
df$Type <- factor(df$Type, levels=df$Type[order(df$Freq)], ordered=TRUE)
fig <- ggplot(data=df[1:20,]) +
geom_bar(aes(Type, Freq), stat="identity", position="dodge") +
coord_flip() +
labs(title = title) +
labs(x = "", y = "Absolute Frequency") +
theme_bw() +
theme(plot.title   = element_text(size=18),
strip.text.y = element_text(size=14, angle=0),
axis.text.x  = element_text(size=12, angle=0),
axis.text.y  = element_text(size=12),
axis.title.x = element_text(size=10),
axis.title.y = element_text(size=10),
legend.position = "none")
return(fig)
}
X
plotFeatureClasses(X)
plotFeatureClasses <- function(df) {
df <- as.data.frame(table(sapply(df, class)))
colnames(df) <- c("Type", "Freq")
df<- df[with(df, order(-Freq)), ]
df$Type <- as.factor(df$Freq)
df$Type <- factor(df$Type, levels=df$Type[order(df$Freq)], ordered=TRUE)
fig <- ggplot(data=df[1:20,]) +
geom_bar(aes(Type, Freq), stat="identity", position="dodge") +
coord_flip() +
labs(title = title) +
labs(x = "", y = "Absolute Frequency") +
theme_bw() +
theme(plot.title   = element_text(size=18),
strip.text.y = element_text(size=14, angle=0),
axis.text.x  = element_text(size=12, angle=0),
axis.text.y  = element_text(size=12),
axis.title.x = element_text(size=10),
axis.title.y = element_text(size=10),
legend.position = "none")
return(fig)
}
df <- as.data.frame(table(sapply(X, class)))
colnames(df) <- c("Type", "Freq")
df<- df[with(df, order(-Freq)), ]
df$Type <- as.factor(df$Freq)
df$Type <- factor(df$Type, levels=df$Type[order(df$Freq)], ordered=TRUE)
head(df)
df <- as.data.frame(table(sapply(X, class)))
colnames(df) <- c("Type", "Freq")
df<- df[with(df, order(-Freq)), ]
df$Type <- as.factor(df$Type)
df$Type <- factor(df$Type, levels=df$Type[order(df$Freq)], ordered=TRUE)
head
df
fig <- ggplot(data=df[1:20,]) +
geom_bar(aes(Type, Freq), stat="identity", position="dodge") +
coord_flip() +
labs(title = title) +
labs(x = "", y = "Absolute Frequency") +
theme_bw() +
theme(plot.title   = element_text(size=18),
strip.text.y = element_text(size=14, angle=0),
axis.text.x  = element_text(size=12, angle=0),
axis.text.y  = element_text(size=12),
axis.title.x = element_text(size=10),
axis.title.y = element_text(size=10),
legend.position = "none")
return(fig)
fig
plotFeatureClasses <- function(df) {
df <- as.data.frame(table(sapply(df, class)))
colnames(df) <- c("Type", "Freq")
df<- df[with(df, order(-Freq)), ]
df$Type <- as.factor(df$Type)
df$Type <- factor(df$Type, levels=df$Type[order(df$Freq)], ordered=TRUE)
fig <- ggplot(data=df[1:20,]) +
geom_bar(aes(Type, Freq), stat="identity", position="dodge") +
coord_flip() +
labs(title = "Feature Types") +
labs(x = "", y = "Absolute Frequency") +
theme_bw() +
theme(plot.title   = element_text(size=18),
strip.text.y = element_text(size=14, angle=0),
axis.text.x  = element_text(size=12, angle=0),
axis.text.y  = element_text(size=12),
axis.title.x = element_text(size=10),
axis.title.y = element_text(size=10),
legend.position = "none")
return(fig)
}
plotFeatureClasses()
plotFeatureClasses(X)
df <- as.data.frame(table(sapply(X, class)))
head(df)
colnames(df) <- c("Type", "Freq")
df<- df[with(df, order(-Freq)), ]
df$Type <- as.factor(df$Type)
df$Type <- factor(df$Type, levels=df$Type[order(df$Freq)], ordered=TRUE)
head(df)
is.na(df)
ggplot(data=df) +
geom_bar(aes(Type, Freq), stat="identity", position="dodge") +
coord_flip() +
labs(title = "Feature Types") +
labs(x = "Type", y = "Absolute Frequency") +
theme_bw() +
theme(plot.title   = element_text(size=18),
strip.text.y = element_text(size=14, angle=0),
axis.text.x  = element_text(size=12, angle=0),
axis.text.y  = element_text(size=12),
axis.title.x = element_text(size=10),
axis.title.y = element_text(size=10),
legend.position = "none")
ggplot(data=df) +
geom_bar(aes(Type, Freq), stat="identity", position="dodge") +
labs(title = "Feature Types") +
labs(x = "Type", y = "Absolute Frequency") +
scale_y_discrete() +
theme_bw() +
theme(plot.title   = element_text(size=18),
strip.text.y = element_text(size=14, angle=0),
axis.text.x  = element_text(size=12, angle=0),
axis.text.y  = element_text(size=12),
axis.title.x = element_text(size=10),
axis.title.y = element_text(size=10),
legend.position = "none")
runApp()
runApp()
shiny::runApp()
x
X
sapply(X, class)
types <- sapply(X, class))
types <- sapply(X, class)
types[which(types=="numeric")]
names(types[which(types=="numeric")])
library(rbokeh)
?ly_bar
X
head(df)
p <- figure(width = 600, height = 600) %>% ly_bar(df, Type, Freq)
p <- figure(width = 600, height = 600) %>% ly_bar(df, df$Type, df$Freq)
p <- figure(width = 600, height = 600) %>% ly_bar(df, x=Type, y=Freq)
p
names(types[which(types=="numeric")])
figure(width = 600, height = 600) %>% ly_bar(df, x=Type, y=Freq)
c(list(names(types[which(types=="numeric")])), list(names(types[which(types=="factor")])), names(types[which(types=="integer")]))
df$Features <- c(list(names(types[which(types=="numeric")])), list(names(types[which(types=="factor")])), names(types[which(types=="integer")]))
figure(width = 600, height = 600) %>% ly_bar(df, x=Type, y=Freq, hover=Features)
figure(width = 600, height = 600) %>% ly_bar(df, x=Type, y=Freq, hover=list(Features))
df$Features <- c(list(names(types[which(types=="numeric")])), list(names(types[which(types=="factor")])), list(names(types[which(types=="integer")])))
figure(width = 600, height = 600) %>% ly_bar(df, x=Type, y=Freq, hover=list(Features))
df$Features <- names(types[which(types=="numeric")])
figure(width = 600, height = 600) %>% ly_bar(df, x=Type, y=Freq, hover=list(names(types[which(types=="numeric")])))
figure(width = 600, height = 600) %>% ly_bar(df, x=Type, y=Freq, hover=list(names(types[which(types=="numeric")])))
figure(width = 600, height = 600) %>% ly_bar(df, x=Type, y=Freq, hover=list(names(types[which(types=="numeric"),
names(types[which(types=="numeric"),
names(types[which(types=="numeric")])))))
runApp()
runApp()
X$CellThickness
ggplot(X$CellThickness, aes(x=CellThickness)) +
geom_density() +
geom_point(aes(x=CellThickness, y = 0.0005),
alpha = 0.25, size=4) +
# geom_vline(xintercept = 2, linetype = "dashed", color="red") +
# geom_vline(xintercept = -2, linetype = "dashed", color="red") +
annotate("text", x = Inf, y = Inf, label = sprintf("n=%i", ncol(X)),
vjust=1.8, hjust=1.2) +
xlab("Skewness") +
theme_bw()
ggplot(X, aes(x=CellThickness)) +
geom_density() +
geom_point(aes(x=CellThickness, y = 0.0005),
alpha = 0.25, size=4) +
# geom_vline(xintercept = 2, linetype = "dashed", color="red") +
# geom_vline(xintercept = -2, linetype = "dashed", color="red") +
annotate("text", x = Inf, y = Inf, label = sprintf("n=%i", ncol(X)),
vjust=1.8, hjust=1.2) +
xlab("Skewness") +
theme_bw()
runApp()
label <- "Class"
Y <- X[, label]
X <- X[, -which(names(X) == label)]
X_projected <- pcaTransform(X)
head(X_projected
)
summary(X_projected)
plot(X_projected,type="lines")
preProc   = preProcess(X, method=c("center", "scale", "pca"))
preProc
str(preProc)
preProc$trace
plot(preProc$trace)
preProc$rotation[3]
preProc$rotation
str(preProc$rotation)
preProc$rotation
str(preProc)
preProc$rotation
preProc$mean
df <- data.frame(Component=colnames(preProc$rotation), ExplVariance=rotation$trace)
df <- data.frame(Component=colnames(preProc$rotation), ExplVariance=preProc$rotation$trace)
preProc$rotation$trace
preProc$trace
df <- data.frame(Component=colnames(preProc$rotation),
ExplVariance=preProc$rotation$trace)
data.frame(Component=colnames(preProc$rotation),
ExplVariance=preProc$trace)
preProc$trace
df <- data.frame(Component=colnames(preProc$rotation),
ExplVariance=preProc$trace[1:numComp])
numComp <- preProc$numComp
df <- data.frame(Component=colnames(preProc$rotation),
ExplVariance=preProc$trace[1:numComp])
fig <- figure(width = 600, height = 600) %>%
ly_points(df, hover = list(ExplVariance))
fig
preProc <- preProcess(X, method=c("pca", "center", "scale"))
numComp <- preProc$numComp
df <- data.frame(Component=colnames(preProc$rotation),
ExplVariance=preProc$trace[1:numComp])
fig <- figure(width = 600, height = 600) %>%
ly_points(df, hover = list(ExplVariance))
fig
figure(width = 600, height = 600) %>%
ly_points(df, hover = list(ExplVariance))
df
fig <- figure(width = 600, height = 600) %>%
ly_points(df, x=Component, y=ExplVariance,
hover = list(ExplVariance))
fig
preProc <- preProcess(X, method=c("ica", "center", "scale"))
numComp <- preProc$numComp
df <- data.frame(Component=colnames(preProc$rotation),
ExplVariance=preProc$trace[1:numComp])
fig <- figure(width = 600, height = 600) %>%
ly_points(df, x=Component, y=ExplVariance,
hover = list(ExplVariance))
fig
preProc <- preProcess(X, method=c("pca", "center", "scale"), n.comp=10)
preProc <- preProcess(X, method=c("pca", "center", "scale"), n.comp=3)
str(preProc)
preProc <- preProcess(X, method=c("pca", "center", "scale"), k=3)
str(preProc)
runApp()
ll
X <- read.csv("breastCancer.csv", stringsAsFactors = T)
X
Y <- X$Class
X <- X[,-1]
colnames(X)
X <- read.csv("breastCancer.csv", stringsAsFactors = T)
colnames(X)
X <- X[,1:ncol(X)-1]
X
colnames(X)
write.csv(X, file="breastCancer.csv")
write.csv(Y, file="breastCancerResponse.csv")
X <- read.csv("breastCancerProcessed.csv", stringsAsFactors = T)
Y <- X$Class
X <- X[,1:ncol(X)-1]
write.csv(X, file="breastCancerProcessed.csv")
write.csv(Y, file="breastCancerProcessedResponse.csv")
Y <- read.csv("breastCancerProcessedResponse.csv")
Y
write.csv(Y, file="breastCancerProcessedResponse.csv", row.names = F)
Y
Y <- read.csv("breastCancerProcessedResponse.csv")
Y
head(Y)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
