{
    "collab_server" : "",
    "contents" : "## app.R ##\nlibrary(shiny)\nlibrary(DT)\nlibrary(shinydashboard)\nlibrary(caret)\nlibrary(rbokeh)\nlibrary(rCharts)\nlibrary(fBasics)\n\nsource(\"visualizations.R\")\n\noptions(shiny.maxRequestSize = 9*1024^2)\n\nui <- dashboardPage(\n  dashboardHeader(title=\"Basic Dashboard\"),\n  \n  dashboardSidebar(\n    sidebarMenu(\n      fileInput('file1', 'Choose file to upload',\n                accept = c(\n                  'text/csv',\n                  'text/comma-separated-values',\n                  'text/tab-separated-values',\n                  'text/plain',\n                  '.csv',\n                  '.tsv')),\n      menuItem(\"DataTable\", tabName = \"datatable\", icon = icon(\"table\")),\n      menuItem(\"Summary Statistics\", tabName = \"summaryStatsItem\", icon = icon(\"table\")),\n      menuItem(\"Overview\", tabName = \"overview\", icon = icon(\"bar-chart\")),\n      menuItem(\"Correlation\", tabName = \"correlation\", icon = icon(\"bar-chart\")),\n      menuItem(\"Dimensionality Reduction\", tabName = \"dimRed\", icon = icon(\"chevron-down\")),\n      menuItem(\"Preprocessing\", tabName = \"preProc\", icon = icon(\"list\")),\n      uiOutput(\"singleSelect\"),\n      uiOutput(\"multiSelect\"),\n      uiOutput(\"classLabelSelect\")\n    )\n  ),\n  \n  dashboardBody(\n    tabItems(\n      # First tab content\n      tabItem(tabName = \"datatable\",\n              fluidRow(\n                box(DT::dataTableOutput(\"dataTable\"))                \n              )\n      ),\n      tabItem(tabName = \"summaryStatsItem\",\n              h1(\"Dataset Metrics\"),\n              h2(\"Feature Types\"),\n              fluidRow(\n                box(plotOutput(\"featureTypePlot\")),\n                box()\n              ),\n              h2(\"Summary Statistics\"),\n              fluidRow(DT::dataTableOutput(\"summaryStats\"))\n      ),\n      tabItem(tabName = \"overview\",\n              fluidRow(\n                box(plotOutput(\"qqPlot\")),\n                box(plotOutput(\"skewnessPlot\"))\n              ),\n              fluidRow(\n                box(sliderInput(\"bins\",\n                                \"Number of bins:\",\n                                min = 1,\n                                max = 50,\n                                value = 30),\n                    plotOutput(\"featureDistPlot\"))\n              )\n      ),\n      tabItem(tabName = \"correlation\",\n              fluidRow(\n                box(plotOutput(\"pairsPlot\")),\n                box(chartOutput(\"corMatPlot\", \"polycharts\"))\n              )\n      ),\n      tabItem(tabName = \"dimRed\",\n              fluidRow(\n                box(selectInput(\"dimRedSelect\", \"Dimensionality Reduction Technique\", \n                                choices=c(\"PCA\", \"ICA\"), selected=c(\"PCA\")),\n                    actionButton(\"computeDimRedBtn\", \"Compute\"))),\n              fluidRow(\n                rbokehOutput(\"dimRedPlot\")\n              )\n      )\n      # tabItem(tabName = \"preProc\",\n      #         fluidRow(\n      #           box(\n      #             selectizeInput(\n      #               'preProcessing', 'Preprocessing Options',\n      #               choices = c(\"BoxCox\", \"YeoJohnson\",\n      #                           \"expoTrans\", \"center\",\n      #                           \"scale\", \"spatialSign\",\n      #                           \"range\"),\n      #               selected = c(\"center\", \"scale\"),\n      #               multiple = TRUE),\n      #             actionButton(\"preProcessBtn\", \"PreProcess\")\n      #           ),\n      #           fluidRow(\n      #             verbatimTextOutput(\"preProcMsg\")\n      #           )\n      #         )\n      # )\n    )\n  )\n)\n      \n\nserver <- function(input, output) {\n  \n  inputData <- reactive({\n    inFile <- input$file1\n    \n    if (is.null(inFile))\n      return(NULL)\n    \n    read.csv(inFile$datapath, header = TRUE, \n             sep = \",\", \n             stringsAsFactors = T)\n  })\n  \n  selectedSingleFeature <- reactive({\n    input$singleFeature\n  })\n  \n  selectedClassLabel <- reactive({\n    input$classLabel\n  })\n  \n  selectedMultiFeatures <- reactive({\n    input$multiFeature\n  })\n  \n  output$featureTypePlot <- renderPlot({\n    print(featureClassPlot(inputData()))\n  })\n  \n  output$featureDistPlot <- renderPlot({\n    selected <- selectedSingleFeature()\n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()\n    x    <- data[, selected]\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    \n    # draw the histogram with the specified number of bins\n    hist(x, breaks = bins, col = 'darkgray', border = 'white')\n  })\n  \n  output$skewnessPlot <- renderPlot({\n    selected <- selectedMultiFeatures()\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()[, selected]\n    print(plotSkewness(data))\n  })\n  \n  output$pairsPlot <- renderPlot({\n    selected <- selectedMultiFeatures()\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()[, selected]\n    plotPairs(data)\n  })\n  \n  output$corMatPlot <- renderChart({\n    selected <- selectedMultiFeatures()\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()[, selected]\n    data <- data[complete.cases(data), ]\n    fig <- plotCorMat(data)\n    fig$addParams(dom = 'corMatPlot')\n    fig\n  })\n  \n  output$qqPlot <- renderPlot({\n    selected <- selectedSingleFeature()\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()\n    print(basicStats(data[, selected]))\n    print(qqPlot(data[, selected]))\n  })\n  \n  output$dimRedPlot <- renderRbokeh({\n    input$computeDimRedBtn\n    selected   <- isolate(selectedMultiFeatures())\n    classLabel <- isolate(selectedClassLabel())\n      \n    if (is.null(selected))\n      return(NULL)\n      \n    data <- inputData()[, c(selected, classLabel)]\n\n    if (input$dimRedSelect == \"PCA\") {\n      return(pcaPlot(data, classLabel))\n    }\n      \n    if (input$dimRedSelect == \"ICA\") {\n      return(icaPlot(data, classLabel))\n    }\n    \n    if (input$dimRedSelect == \"t-SNE\") {\n      return(tsnePlot(data, classLabel))\n    }\n  })\n  \n  output$dataTable <- DT::renderDataTable({\n    selected   <- selectedMultiFeatures()\n    print(paste(\"Selected Data Table: \", selected))\n    print(length(selected))\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()[, selected]\n    data\n  }, options = list(pageLength = 25))\n  \n  output$summaryStats <- DT::renderDataTable({\n    selected   <- selectedMultiFeatures()\n    print(paste(\"Selected Summary Stats: \", selected))\n    print(length(selected))\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()[, selected]\n    basicStats(data)\n  }, options = list(pageLength = 16))\n  \n  output$singleSelect <- renderUI({\n    selectInput(\"singleFeature\", \"Choose a Feature:\", \n                choices = colnames(inputData()))\n  })\n  \n  output$multiSelect <- renderUI({\n    selectizeInput(\n      'multiFeature', 'Select Features to Visualize:',\n      choices = colnames(inputData()),\n      selected = colnames(inputData())[1],\n      multiple = TRUE)\n  })\n  \n  output$classLabelSelect <- renderUI({\n    selectInput(\"classLabel\", \"Choose a Class Label:\", \n                choices = colnames(inputData()))\n  })\n  \n  preProcessEventMsg <- eventReactive(input$preProcessBtn, {\n    preProc       <- preProcess(inputData(), method=input$preProcessing)\n    procInputData <- reactive({predict(preProc, inputData())})\n    msg <- \"Data has been transformed!\"\n  })\n  \n  output$preProcMsg <- renderText({\n    preProcessEventMsg()\n  })\n}\n\nshinyApp(ui, server)",
    "created" : 1460356881674.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "110|25|119|2|\n121|37|123|2|\n125|34|127|2|\n129|37|131|2|\n133|40|135|2|\n137|40|148|2|\n150|37|158|2|\n160|34|168|2|\n170|36|181|2|\n183|31|192|2|\n194|37|215|2|\n217|43|227|2|\n229|46|239|2|\n241|35|244|2|\n246|34|252|2|\n254|39|257|2|\n259|60|263|2|\n265|35|267|2|\n",
    "hash" : "190237231",
    "id" : "FD6E4826",
    "lastKnownWriteTime" : 1460372070,
    "last_content_update" : 1460372157552,
    "path" : "~/workspace/R/projects/ShinyDashboardExample/app.R",
    "project_path" : "app.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}