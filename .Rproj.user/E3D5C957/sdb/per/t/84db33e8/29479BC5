{
    "collab_server" : "",
    "contents" : "library(e1071)\r\nlibrary(ggplot2)\r\nlibrary(caret)\r\nlibrary(fastICA)\r\n\r\nsource(\"helpers.R\")\r\n\r\n#' The following function displays the skewness of column vectors of a data frame,\r\n#' as bar- or density plot depending of the dimensions of th input data frame.\r\n#' @author Jens Hooge jens.hooge@gmail.com\r\n\r\n#' @title Skewness Plot.\r\n#' \r\n#' @description \\code{plotSkewness} plots the skewness of a distribution.\r\n#' \r\n#' @details\r\n#' \\code{plotSkewness} expects a data frame X, and computes the skewness of its\r\n#' column vectors. Skewness is a measure of asymmetry of a distribution. While a\r\n#' skewness of 0 indicates a perfectly symmetrical distribution, larger skewness values\r\n#' indicate that the density of values is higher for smaller values. In that case the\r\n#' distribution would be called right skewed. Vice versa, for negative values of skewness\r\n#' the distribution would be called left skewed. Skewness values between -2 and 2 indicate\r\n#' a roughly symmetric distribution. If the number of columns in X is smaller or equal to 50,\r\n#' skewness displayed in a barplot and a density plot otherwise.\r\n#' \r\n#' @param X real valued data frame\r\n#' \r\n#' @examples\r\n#' plotSkewness(mtcars)\r\n#' \r\n#' @return list{base}\r\nplotSkewness <- function(X) {\r\n  X <- as.data.frame(X) ## in case it is just a numeric vector\r\n  skewValues <- as.data.frame(sapply(X, skewness, na.rm=TRUE, type=1))\r\n  skewValues$variable <- rownames(skewValues)\r\n  rownames(skewValues) <- NULL\r\n  colnames(skewValues) <- c(\"skewnessValue\", \"variable\")\r\n  skewValues$variable <- as.factor(skewValues$variable)\r\n  \r\n  if (ncol(X) <= 50){\r\n    fig <- ggplot(skewValues, aes(x=variable, y=skewnessValue)) +\r\n      geom_bar(stat=\"identity\", position=\"dodge\") +\r\n      geom_hline(yintercept = 2, linetype = \"dashed\", color=\"red\") +\r\n      geom_hline(yintercept = -2, linetype = \"dashed\", color=\"red\") +\r\n      ylab(\"Skewness\") +\r\n      theme_bw() +\r\n      theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5))\r\n  } else {\r\n    fig <- ggplot(skewValues, aes(x=skewnessValue)) +\r\n      geom_density() +\r\n      geom_point(aes(x=skewnessValue, y = 0.0005),\r\n                 alpha = 0.25, size=4) +\r\n      geom_vline(xintercept = 2, linetype = \"dashed\", color=\"red\") +\r\n      geom_vline(xintercept = -2, linetype = \"dashed\", color=\"red\") +\r\n      annotate(\"text\", x = Inf, y = Inf, label = sprintf(\"n=%i\", ncol(X)),\r\n               vjust=1.8, hjust=1.2) +\r\n      xlab(\"Skewness\") +\r\n      theme_bw()\r\n  }\r\n  return(fig)\r\n}\r\n\r\nqqPlot <- function(values) {\r\n  df <- data.frame(values=values)\r\n  fig <- ggplot(df, aes(sample = values)) +\r\n    stat_qq(alpha=0.5) + geom_abline(intercept = mean(df$values),\r\n                                     slope = sd(df$values),\r\n                                     colour=\"red\") +\r\n    labs(title=\"QQ Plot\") +\r\n    theme_bw() +\r\n    theme(plot.title   = element_text(size=25),\r\n          axis.text.x  = element_text(size=20),\r\n          axis.title.x = element_text(size=25),\r\n          axis.text.y  = element_text(size=20),\r\n          axis.title.y = element_text(size=25),\r\n          legend.title = element_blank(),\r\n          legend.text  = element_text(size=15))\r\n  \r\n  return(fig)\r\n}\r\n\r\npcaPlot <- function(X, label) {\r\n  Y <- X[, label]\r\n  X <- X[, -which(names(X) == label)]\r\n  X_projected <- pcaTransform(X)\r\n  # preProc   = preProcess(X, method=c(\"center\", \"scale\", \"pca\"))\r\n  # X_projected = predict(preProc, X)[, 1:3] # PCA projection\r\n  \r\n  projection <- data.frame(Label=Y,\r\n                           PC1=X_projected[, 1], \r\n                           PC2=X_projected[, 2],\r\n                           PC3=X_projected[, 3])\r\n  \r\n  tools <- c(\"pan\", \"resize\", \r\n             \"wheel_zoom\", \"box_zoom\", \r\n             \"box_select\", \"lasso_select\", \r\n             \"reset\", \"save\")\r\n  \r\n  cols <- 2:ncol(projection)\r\n  nms <- expand.grid(names(projection)[cols], \r\n                     rev(names(projection)[cols]), \r\n                     stringsAsFactors = FALSE)\r\n  splom_list <- vector(\"list\", 9)\r\n  for(ii in seq_len(nrow(nms))) {\r\n    splom_list[[ii]] <- figure(width = 200, height = 200, tools = tools,\r\n                               xlab = nms$Var1[ii], ylab = nms$Var2[ii]) %>%\r\n      ly_points(nms$Var1[ii], nms$Var2[ii], \r\n                data = projection,\r\n                color = Label, \r\n                size = 6, \r\n                hover=list(Label),\r\n                legend = FALSE)\r\n  }\r\n  grid_plot(splom_list, ncol = 3, same_axes = TRUE, link_data = TRUE)\r\n}\r\n\r\nicaPlot <- function(X, label) {\r\n  Y <- X[, label]\r\n  X <- X[, -which(names(X) == label)]\r\n  X_projected <- icaTransform(X)\r\n\r\n  projection <- data.frame(Label=Y,\r\n                           IC1=X_projected[, 1], \r\n                           IC2=X_projected[, 2],\r\n                           IC3=X_projected[, 3])\r\n  \r\n  tools <- c(\"pan\", \"resize\", \r\n             \"wheel_zoom\", \"box_zoom\", \r\n             \"box_select\", \"lasso_select\", \r\n             \"reset\", \"save\")\r\n  \r\n  cols <- 2:ncol(projection)\r\n  nms <- expand.grid(names(projection)[cols], \r\n                     rev(names(projection)[cols]), \r\n                     stringsAsFactors = FALSE)\r\n  splom_list <- vector(\"list\", 9)\r\n  for(ii in seq_len(nrow(nms))) {\r\n    splom_list[[ii]] <- figure(width = 200, height = 200, tools = tools,\r\n                               xlab = nms$Var1[ii], ylab = nms$Var2[ii]) %>%\r\n      ly_points(nms$Var1[ii], nms$Var2[ii], \r\n                data = projection,\r\n                color = Label, \r\n                size = 6, \r\n                hover=list(Label),\r\n                legend = FALSE)\r\n  }\r\n  grid_plot(splom_list, ncol = 3, same_axes = TRUE, link_data = TRUE)\r\n}\r\n\r\ntsnePlot <- function(X, label) {\r\n  Y <- X[, label]\r\n  X <- X[, -which(names(X) == label)]\r\n  X_projected <- tsneTransform(X)\r\n  \r\n  projection <- data.frame(Label=Y,\r\n                           Comp1=X_projected[, 1], \r\n                           Comp2=X_projected[, 2],\r\n                           Comp3=X_projected[, 3])\r\n  \r\n  tools <- c(\"pan\", \"resize\", \r\n             \"wheel_zoom\", \"box_zoom\", \r\n             \"box_select\", \"lasso_select\", \r\n             \"reset\", \"save\")\r\n  \r\n  cols <- 2:ncol(projection)\r\n  nms <- expand.grid(names(projection)[cols], \r\n                     rev(names(projection)[cols]), \r\n                     stringsAsFactors = FALSE)\r\n  splom_list <- vector(\"list\", 9)\r\n  for(ii in seq_len(nrow(nms))) {\r\n    splom_list[[ii]] <- figure(width = 200, height = 200, tools = tools,\r\n                               xlab = nms$Var1[ii], ylab = nms$Var2[ii]) %>%\r\n      ly_points(nms$Var1[ii], nms$Var2[ii], \r\n                data = projection,\r\n                color = Label, \r\n                size = 6, \r\n                hover=list(Label),\r\n                legend = FALSE)\r\n  }\r\n  grid_plot(splom_list, ncol = 3, same_axes = TRUE, link_data = TRUE)\r\n}\r\n",
    "created" : 1459764818038.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "16|10|27|2|\n31|29|60|0|\n62|28|79|0|\n81|31|114|0|\n116|31|147|0|\n",
    "hash" : "593573507",
    "id" : "29479BC5",
    "lastKnownWriteTime" : 1459929347,
    "last_content_update" : 1459932088294,
    "path" : "~/workspace/R/projects/ShinyDashboardExample/visualizations.R",
    "project_path" : "visualizations.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}