{
    "collab_server" : "",
    "contents" : "library(e1071)\nlibrary(ggplot2)\nlibrary(caret)\nlibrary(fastICA)\nlibrary(reshape2)\nlibrary(d3heatmap)\nlibrary(plotly)\n\nsource(\"helpers.R\")\n\n#' The following function displays the skewness of column vectors of a data frame,\n#' as bar- or density plot depending of the dimensions of the input data frame.\n#' @author Jens Hooge jens.hooge@gmail.com\n\n#' @title Skewness Plot.\n#' \n#' @description \\code{plotSkewness} plots the skewness of a distribution.\n#' \n#' @details\n#' \\code{plotSkewness} expects a data frame X, and computes the skewness of its\n#' column vectors. Skewness is a measure of asymmetry of a distribution. While a\n#' skewness of 0 indicates a perfectly symmetrical distribution, larger skewness values\n#' indicate that the density of values is higher for smaller values. In that case the\n#' distribution would be called right skewed. Vice versa, for negative values of skewness\n#' the distribution would be called left skewed. Skewness values between -2 and 2 indicate\n#' a roughly symmetric distribution. If the number of columns in X is smaller or equal to 50,\n#' skewness displayed in a barplot and a density plot otherwise.\n#' \n#' @param X real valued data frame\n#' \n#' @examples\n#' plotSkewness(mtcars)\n#' \n#' @return list{base}\nplotSkewness <- function(X) {\n  X <- as.data.frame(X) ## in case it is just a numeric vector\n  skewValues <- as.data.frame(sapply(X, skewness, na.rm=TRUE, type=1))\n  skewValues$variable <- rownames(skewValues)\n  rownames(skewValues) <- NULL\n  colnames(skewValues) <- c(\"skewnessValue\", \"variable\")\n  skewValues$variable <- as.factor(skewValues$variable)\n  \n  if (ncol(X) <= 50){\n    fig <- ggplot(skewValues, aes(x=variable, y=skewnessValue)) +\n      geom_bar(stat=\"identity\", position=\"dodge\") +\n      geom_hline(yintercept = 2, linetype = \"dashed\", color=\"red\") +\n      geom_hline(yintercept = -2, linetype = \"dashed\", color=\"red\") +\n      ylab(NULL) +\n      theme_bw() +\n      theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5))\n  } else {\n    fig <- ggplot(skewValues, aes(x=skewnessValue)) +\n      geom_density() +\n      geom_point(aes(x=skewnessValue, y = 0.0005),\n                 alpha = 0.25, size=4, colour=\"darkgray\") +\n      geom_vline(xintercept = 2, linetype = \"dashed\", color=\"red\") +\n      geom_vline(xintercept = -2, linetype = \"dashed\", color=\"red\") +\n      annotate(\"text\", x = Inf, y = Inf, label = sprintf(\"n=%i\", ncol(X)),\n               vjust=1.8, hjust=1.2) +\n      xlab(NULL) +\n      ylab(NULL) +\n      theme_bw()\n  }\n  return(fig)\n}\n\nplotPairs <- function(X) {\n  \n  #' plot absolute correlation coefficients (pearson) into panel\n  #' and adjust the text size according to the correlation\n  #' @param x numeric vector\n  #' @param y numeric vector\n  #' @return plot text element\n  #' \n  panel.cor <- function(x, y, digits = 2, prefix = \"\", cex.cor, ...) {\n    usr <- par(\"usr\"); on.exit(par(usr))\n    par(usr = c(0, 1, 0, 1))\n    r <- abs(cor(x, y))\n    txt <- format(c(r, 0.123456789), digits = digits)[1]\n    txt <- paste0(prefix, txt)\n    if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\n    text(0.5, 0.5, txt, cex = cex.cor * r)\n  }\n  \n  \n  #' plot histogram into diagonal panel of a numeric vector\n  #' @param x numeric vector\n  #' @return histogram with colored bars\n  #' \n  panel.hist <- function(x, ...) {\n    usr <- par(\"usr\"); on.exit(par(usr))\n    par(usr = c(usr[1:2], 0, 1.5) )\n    h <- hist(x, plot = FALSE)\n    breaks <- h$breaks; nB <- length(breaks)\n    y <- h$counts; y <- y/max(y)\n    rect(breaks[-nB], 0, breaks[-1], y, col = \"#67000D\", ...)\n  }\n  \n  \n  #' plot a smoothScatter (color density of a scatter plot) with a loess fit\n  #' into the panels \n  #' @param x numeric vector\n  #' @param y numeric vector\n  #' @return smoothed scatter plot\n  #' \n  panel.smoothScatter <- function (x, y, bg = NA, \n                                   cex = 1, col.smooth = \"red\",\n                                   span = 2/3, iter = 3, ...) {\n    # colors for the density\n    palette <- colorRampPalette(c(\"blue\", \"orange\", \"red\"))\n    s <- smoothScatter(x, y, colramp = palette, bg = bg, cex = cex, add=T)\n    ok <- is.finite(x) & is.finite(y)\n    if (any(ok)) \n      lines(stats::lowess(x[ok], y[ok], f = span, iter = iter), \n            col = col.smooth, ...)\n  }\n  \n  mat <- as.matrix(X)\n  fig <- pairs(mat,\n               lower.panel = panel.smoothScatter,\n               upper.panel = panel.cor,\n               diag.panel  = panel.hist)\n  return(fig)\n  \n  \n  # ### examples\n  # data(iris)\n  # myMatrix <- as.matrix(iris[,1:4])\n  # ### see ?pairs for more help\n  # pairs(myMatrix,\n  #       lower.panel = panel.smoothScatter,\n  #       upper.panel = panel.cor,\n  #       diag.panel  = panel.hist)\n  \n}\n\nplotCorMat <- function(X) {\n  corrmatrix <- cor(X)\n  corrdata=as.data.frame(corrmatrix)\n  corrdata$Variable1=names(corrdata)\n  corrdatamelt=melt(corrdata,id=\"Variable1\")\n  names(corrdatamelt)=c(\"Variable1\",\"Variable2\",\"CorrelationCoefficient\")\n  corrmatplot = rPlot(Variable2 ~ Variable1, color = 'CorrelationCoefficient', data = corrdatamelt, type = 'tile', height = 600)\n  corrmatplot$addParams(height = 400, width=800)\n  corrmatplot$guides(\"{color: {scale: {type: gradient2, lower: 'red',  middle: 'white', upper: 'blue',midpoint: 0}}}\")\n  corrmatplot$guides(y = list(numticks = length(unique(corrdatamelt$Variable1))))\n  corrmatplot$guides(x = list(numticks = 3))\n  #corrmatplot$addParams(staggerLabels=TRUE)\n  corrmatplot\n}\n\nplotViolins <- function(X, label) {\n  \n  molten <- melt(X, id.vars = label)\n  \n  fig <- ggplot(molten, aes(variable, value, fill=molten[, 1])) + \n    geom_violin(trim=FALSE) +\n    geom_boxplot(width=0.1) +\n    geom_point(alpha = 0.3,  position = \"jitter\") +\n    labs(x=NULL, y=NULL) + \n    coord_flip() +\n    theme_bw() +\n    guides(fill=guide_legend(title=label))\n          \n  return(fig)\n}\n\nqqPlot <- function(values) {\n  df <- data.frame(values=values)\n  fig <- ggplot(df, aes(sample = values)) +\n    stat_qq(alpha=0.5) + \n    geom_abline(intercept = mean(df$values),\n                slope = sd(df$values),\n                colour=\"red\") +\n    labs(title=\"QQ Plot\") +\n    theme_bw() +\n    theme(plot.title   = element_text(size=25),\n          axis.text.x  = element_text(size=20),\n          axis.title.x = element_text(size=25),\n          axis.text.y  = element_text(size=20),\n          axis.title.y = element_text(size=25),\n          legend.title = element_blank(),\n          legend.text  = element_text(size=15))\n  \n  return(fig)\n}\n\nfeatureTypePlot <- function(df) {\n  df <- as.data.frame(table(sapply(df, class)))\n  colnames(df) <- c(\"Type\", \"Freq\")\n  df<- df[with(df, order(-Freq)), ]\n  df$Type <- as.factor(df$Type)\n  df$Type <- factor(df$Type, levels=df$Type[order(df$Freq)], ordered=TRUE)\n  \n  fig <- nPlot(Freq ~ Type, data = df, type = 'pieChart')\n  fig$chart(donut = TRUE)\n  fig$addParams(dom = \"featureTypePlot\")\n\n  return(fig)\n}\n\nresponseClassesPlot <- function(df) {\n  label <- colnames(df)[1]\n  f <- as.formula(paste(\"~\", label))\n  fig <- nPlot(f, data = df, type = 'pieChart')\n  fig$chart(donut = TRUE)\n  fig$addParams(dom = \"responseClassesPlot\")\n\n  return(fig)\n}\n\npca2dPlot <- function(X, label) {\n  Y <- X[, label]\n  X <- X[, -which(names(X) == label)]\n\n  X_projected <- pcaTransform(X)\n  # preProc   = preProcess(X, method=c(\"center\", \"scale\", \"pca\"))\n  # X_projected = predict(preProc, X)[, 1:3] # PCA projection\n  \n  projection <- data.frame(Label=Y,\n                           PC1=X_projected[, 1], \n                           PC2=X_projected[, 2],\n                           PC3=X_projected[, 3])\n  \n  tools <- c(\"pan\", \"resize\", \n             \"wheel_zoom\", \"box_zoom\", \n             \"box_select\", \"lasso_select\", \n             \"reset\", \"save\")\n  \n  cols <- 2:ncol(projection)\n  nms <- expand.grid(names(projection)[cols], \n                     rev(names(projection)[cols]), \n                     stringsAsFactors = FALSE)\n  \n  splom_list <- vector(\"list\", 9)\n  for(ii in seq_len(nrow(nms))) {\n    splom_list[[ii]] <- figure(width = 200, height = 200, tools = tools,\n                               xlab = nms$Var1[ii], ylab = nms$Var2[ii]) %>%\n      ly_points(nms$Var1[ii], nms$Var2[ii], \n                data = projection,\n                color = Label, \n                size = 6, \n                hover=list(Label),\n                legend = FALSE)\n  }\n  grid_plot(splom_list, ncol = 3, same_axes = TRUE, link_data = TRUE)\n}\n\npca2dPlotly <- function(X, label) {\n  Y <- X[, label]\n  X <- X[, -which(names(X) == label)]\n\n  # print(sprintf(\"colnames(X): \",colnames(X)))\n  # print(sprintf(\"label: \", label))\n\n  X_projected <- pcaTransform(X)\n  Y <- data.frame(Y)\n  colnames(Y) <- label\n  X_projected <- cbind(X_projected, Y)\n\n  print(colnames(X_projected))\n  # print(sprintf(\"colnames(X_projected): \", label))\n\n  f <- list(\n    family = \"sans-serif\",\n    size = 12,\n    color = \"#000\"\n  )\n  x <- list(\n    title = colnames(X_projected)[1],\n    titlefont = f\n  )\n  y <- list(\n    title = colnames(X_projected)[2],\n    titlefont = f\n  )\n\n  fig <- plot_ly(data = X_projected,\n                 x = X_projected[, 1],\n                 y = X_projected[, 2],\n                 mode = \"markers\",\n                 color = X_projected[, 3]) %>%\n    layout(xaxis = x, yaxis = y) %>%\n    config(displayModeBar = F)\n  return(fig)\n}\n\npca3dPlot <- function(X, label) {\n  Y <- X[, label]\n  X <- X[, -which(names(X) == label)]\n  \n  X_projected <- pcaTransform(X)\n  # preProc   = preProcess(X, method=c(\"center\", \"scale\", \"pca\"))\n  # X_projected = predict(preProc, X)[, 1:3] # PCA projection\n  \n  projection <- data.frame(Label=Y,\n                           PC1=X_projected[, 1], \n                           PC2=X_projected[, 2],\n                           PC3=X_projected[, 3])\n  \n  plot_ly(projection, x=PC1, y=PC2, z=PC3, \n                 text=paste(\"Label: \", Label),\n                 color=Label,\n                 opacity=0.6,\n                 type=\"scatter3d\", mode=\"markers\") %>%\n    config(displayModeBar = F)\n}\n\nscreePlotPCA <- function(X) {\n  preProc    <- preProcess(X, method=c(\"pca\", \"center\", \"scale\"))\n  components <- colnames(preProc$rotation)\n  numComp    <- preProc$numComp\n  cumVar     <- preProc$trace[1:numComp]\n  screeDF    <- data.frame(Component=1:numComp, \n                           CumulativeVariance=cumVar)\n  \n  fig <- plot_ly(screeDF, \n                 x = Component, \n                 y = CumulativeVariance, \n                 name = \"linear\", \n                 line = list(shape = \"linear\")) %>%\n         config(displayModeBar = F)\n  \n  return(fig)\n}\n\nscreePlotICA <- function(X) {\n  preProc    <- preProcess(X, method=c(\"ica\", \"center\", \"scale\"), n.comp=ncol(X))\n  components <- colnames(preProc$rotation)\n  numComp    <- preProc$numComp\n  cumVar     <- preProc$trace[1:numComp]\n  screeDF    <- data.frame(Component=1:numComp, \n                           CumulativeVariance=cumVar)\n  \n  fig <- plot_ly(screeDF, \n                 x = Component, \n                 y = CumulativeVariance, \n                 name = \"linear\", \n                 line = list(shape = \"linear\")) %>%\n    config(displayModeBar = F)\n  \n  return(fig)\n}\n\nica2dPlot <- function(X, label, n.comp) {\n  Y <- X[, label]\n  X <- X[, -which(names(X) == label)]\n  X_projected <- icaTransform(X)\n\n  projection <- data.frame(Label=Y,\n                           IC1=X_projected[, 1], \n                           IC2=X_projected[, 2],\n                           IC3=X_projected[, 3])\n  \n  tools <- c(\"pan\", \"resize\", \n             \"wheel_zoom\", \"box_zoom\", \n             \"box_select\", \"lasso_select\", \n             \"reset\", \"save\")\n  \n  cols <- 2:ncol(projection)\n  nms <- expand.grid(names(projection)[cols], \n                     rev(names(projection)[cols]), \n                     stringsAsFactors = FALSE)\n  splom_list <- vector(\"list\", 9)\n  for(ii in seq_len(nrow(nms))) {\n    splom_list[[ii]] <- figure(width = 200, height = 200, tools = tools,\n                               xlab = nms$Var1[ii], ylab = nms$Var2[ii]) %>%\n      ly_points(nms$Var1[ii], nms$Var2[ii], \n                data = projection,\n                color = Label, \n                size = 6, \n                hover=list(Label),\n                legend = FALSE)\n  }\n  grid_plot(splom_list, ncol = 3, same_axes = TRUE, link_data = TRUE)\n}\n \nica2dPlotly <- function(X, label) {\n  Y <- X[, label]\n  X <- X[, -which(names(X) == label)]\n\n  X_projected <- icaTransform(X, n.comp = ncol(X))\n  Y <- data.frame(Y)\n  colnames(Y) <- label\n  X_projected <- cbind(X_projected, Y)\n\n  f <- list(\n    family = \"sans-serif\",\n    size = 12,\n    color = \"#000\"\n  )\n  x <- list(\n    title = colnames(X_projected)[1],\n    titlefont = f\n  )\n  y <- list(\n    title = colnames(X_projected)[2],\n    titlefont = f\n  )\n\n  fig <- plot_ly(data = X_projected,\n                 x = X_projected[, 1],\n                 y = X_projected[, 2],\n                 mode = \"markers\",\n                 color = X_projected[, 3]) %>%\n    layout(xaxis = x, yaxis = y) %>%\n    config(displayModeBar = F)\n\n  return(fig)\n}\n\nica3dPlot <- function(X, label) {\n  Y <- X[, label]\n  X <- X[, -which(names(X) == label)]\n  \n  X_projected <- icaTransform(X)\n\n  projection <- data.frame(Label=Y,\n                           IC1=X_projected[, 1], \n                           IC2=X_projected[, 2],\n                           IC3=X_projected[, 3])\n  \n  plot_ly(projection, x=IC1, y=IC2, z=IC3, \n                 text=paste(\"Label: \", Label),\n                 color=Label,\n                 type=\"scatter3d\", mode=\"markers\") %>% \n    config(displayModeBar = F)\n}\n\n\n\n\n### STILL TODO\nexplVarPCAplot <- function(X) {\n  preProc <- preProcess(X, method=c(\"pca\", \"center\", \"scale\"))\n  numComp <- preProc$numComp\n  df <- data.frame(Component=colnames(preProc$rotation),\n                   ExplVariance=preProc$trace[1:numComp])\n  \n  fig <- figure(width = 600, height = 600) %>%\n    ly_points(df, x=Component, y=ExplVariance, \n              hover = list(ExplVariance))\n  fig\n}\n\nexplVarICAplot <- function(X) {\n  preProc <- preProcess(X, method=c(\"ica\", \"center\", \"scale\"))\n  numComp <- preProc$numComp\n  df <- data.frame(Component=colnames(preProc$rotation),\n                   ExplVariance=preProc$trace[1:numComp])\n  \n  fig <- figure(width = 600, height = 600) %>%\n    ly_points(df, x=Component, y=ExplVariance, \n              hover = list(ExplVariance))\n  fig\n}\n\n## This function crashes the RStudio session for some reason. tsne works rtsne does not!\ntsnePlot <- function(X, label) {\n  Y <- X[, label]\n  X <- X[, -which(names(X) == label)]\n  X_projected <- tsneTransform(X)\n  \n  projection <- data.frame(Label=Y,\n                           Comp1=X_projected[, 1], \n                           Comp2=X_projected[, 2],\n                           Comp3=X_projected[, 3])\n  \n  tools <- c(\"pan\", \"resize\", \n             \"wheel_zoom\", \"box_zoom\", \n             \"box_select\", \"lasso_select\", \n             \"reset\", \"save\")\n  \n  cols <- 2:ncol(projection)\n  nms <- expand.grid(names(projection)[cols], \n                     rev(names(projection)[cols]), \n                     stringsAsFactors = FALSE)\n  splom_list <- vector(\"list\", 9)\n  for(ii in seq_len(nrow(nms))) {\n    splom_list[[ii]] <- figure(width = 200, height = 200, tools = tools,\n                               xlab = nms$Var1[ii], ylab = nms$Var2[ii]) %>%\n      ly_points(nms$Var1[ii], nms$Var2[ii], \n                data = projection,\n                color = Label, \n                size = 6, \n                hover=list(Label),\n                legend = FALSE)\n  }\n  grid_plot(splom_list, ncol = 3, same_axes = TRUE, link_data = TRUE)\n}\n",
    "created" : 1460525057066.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "136|27|149|0|\n151|35|165|0|\n167|28|185|0|\n187|33|199|0|\n201|37|209|0|\n211|33|246|0|\n287|33|306|0|\n377|35|409|0|\n411|33|427|0|\n433|31|443|0|\n445|31|455|0|\n458|32|489|0|\n",
    "hash" : "1538880092",
    "id" : "9AC732CD",
    "lastKnownWriteTime" : 1460732580,
    "last_content_update" : 1460732594433,
    "path" : "~/workspace/R/projects/ShinyDashboardExample/visualizations.R",
    "project_path" : "visualizations.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}