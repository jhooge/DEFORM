{
    "collab_server" : "",
    "contents" : "## app.R ##\nlibrary(shiny)\nlibrary(DT)\nlibrary(shinydashboard)\nlibrary(caret)\nlibrary(rbokeh)\nlibrary(rCharts)\nlibrary(fBasics)\nlibrary(shinyBS)\nlibrary(plotly)\n\nsource(\"visualizations.R\")\n\noptions(shiny.maxRequestSize = 9*1024^2)\n\nui <- dashboardPage(\n  dashboardHeader(title=\"Basic Dashboard\"),\n  \n  dashboardSidebar(\n    sidebarMenu(\n      fileInput('featureMatrix', 'Upload Feature Matrix',\n                accept = c(\n                  'text/csv',\n                  'text/comma-separated-values',\n                  'text/tab-separated-values',\n                  'text/plain',\n                  '.csv',\n                  '.tsv')),\n      fileInput('responseVector', 'Upload Response Vector',\n                accept = c(\n                  'text/csv',\n                  'text/comma-separated-values',\n                  'text/tab-separated-values',\n                  'text/plain',\n                  '.csv',\n                  '.tsv')),\n      selectInput(\"problemType\", \"Problem Type:\", choices = c(\"Classification\", \"Regression\"), selected = \"Classification\"),\n      uiOutput(\"singleSelect\"),\n      uiOutput(\"multiSelect\"),\n      uiOutput(\"labelSelect\"),\n      menuItem(\"Dataset Content\", tabName = \"datatable\", icon = icon(\"table\")),\n      menuItem(\"Summary Statistics\", tabName = \"summaryStatsItem\", icon = icon(\"table\")),\n      menuItem(\"Overview\", tabName = \"overview\", icon = icon(\"bar-chart\")),\n      menuItem(\"Correlation\", tabName = \"correlation\", icon = icon(\"bar-chart\")),\n      # menuItem(\"Clustering\", tabName = \"clustering\", icon = icon(\"sitemap\")),\n      menuItem(\"Dimensionality Reduction\", tabName = \"dimRed\", icon = icon(\"chevron-down\")),\n      menuItem(\"Documentation\", tabName = \"doc\", icon = icon(\"book\"))\n      # menuItem(\"Preprocessing\", tabName = \"preProc\", icon = icon(\"list\"))\n    )\n  ),\n  \n  dashboardBody(\n    bsAlert(\"alert\"),\n    tabItems(\n      # First tab content\n      tabItem(tabName = \"datatable\",\n              fluidRow(DT::dataTableOutput(\"dataTable\"))\n      ),\n      tabItem(tabName = \"summaryStatsItem\",\n              fluidRow(\n                box(title=\"Dataset Feature Types\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE,\n                    chartOutput(\"featureTypePlot\", \"nvd3\")),\n                box(title=\"Response Labels\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE,\n                    chartOutput(\"responseClassesPlot\", \"nvd3\"))\n              ),\n              fluidRow(\n                box(title=\"Feature Distribution\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE,\n                    plotOutput(\"violinPlot\"))\n              ),\n              h2(\"Summary Statistics\"),\n              fluidRow(DT::dataTableOutput(\"summaryStats\"))\n      ),\n      tabItem(tabName = \"overview\",\n              fluidRow(\n                box(title=\"QQ Plot\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE,\n                    plotOutput(\"qqPlot\")),\n                box(title=\"Skewness\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE,\n                    plotOutput(\"skewnessPlot\"))\n              ),\n              fluidRow(\n                box(title=\"Feature Histogram\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE,\n                    sliderInput(\"bins\",\n                                \"Number of bins:\",\n                                min = 1,\n                                max = 50,\n                                value = 30),\n                    plotOutput(\"featureDistPlot\"))\n              )\n      ),\n      tabItem(tabName = \"correlation\",\n              fluidRow(\n                box(title=\"Pearson Correlation Overview\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE,\n                    plotOutput(\"pairsPlot\")),\n                box(title=\"Pairwise Pearson Correlation\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE,\n                    chartOutput(\"corMatPlot\", \"polycharts\"))\n              )\n      ),\n      tabItem(tabName = \"dimRed\",\n              fluidRow(\n                box(title=\"Dimension Reduction Method\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE,\n                    selectInput(\"dimRedSelect\", NULL, \n                                choices=c(\"PCA\", \"ICA\"), selected=c(\"PCA\")),\n                    actionButton(\"computeDimRedBtn\", \"Compute\"))),\n              fluidRow(box(title=\"3D Projection\", \n                           status = \"primary\", solidHeader = TRUE,\n                           collapsible = TRUE,\n                           plotlyOutput(\"dimRed3DPlot\")),\n                       # box(title=\"2D Projection\",\n                       #     status = \"primary\", solidHeader = TRUE,\n                       #     plotlyOutput(\"dimRed2DPlot\"))\n                       box(title=\"2D Projection\",\n                           status = \"primary\", solidHeader = TRUE,\n                           collapsible = TRUE,\n                           height=10,\n                           rbokehOutput(\"dimRed2DPlot\"))\n              ),\n              fluidRow(box(title=\"Screeplot\",\n                           status = \"primary\", solidHeader = TRUE,\n                           collapsible = TRUE,\n                           plotlyOutput(\"screePlot\"))\n              )\n      ),\n      tabItem(tabName = \"doc\",\n              fluidRow(\n                    box(title=\"About this Dashboard\", \n                        status = \"primary\", solidHeader = TRUE,\n                        width=12,\n                        includeMarkdown(\"doc/motivation.md\"))\n              ),\n              fluidRow(\n                box(title=\"Data Upload\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE, collapsed = TRUE,\n                    includeMarkdown(\"doc/dataUpload.md\")),\n                box(title=\"Dynamic Selectors\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE, collapsed = TRUE,\n                    includeMarkdown(\"doc/dynamicSelectors.md\"))\n              ),\n              fluidRow(\n                box(title=\"Dataset Content\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE, collapsed = TRUE,\n                    includeMarkdown(\"doc/datasetContent.md\")),\n                box(title=\"Summary Statistics\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE, collapsed = TRUE,\n                    includeMarkdown(\"doc/summaryStats.md\"))\n              ),\n              fluidRow(\n                box(title=\"Overview\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE, collapsed = TRUE,\n                    includeMarkdown(\"doc/overview.md\")),\n                box(title=\"Dimensionality Reduction\", \n                    status = \"primary\", solidHeader = TRUE,\n                    collapsible = TRUE, collapsed = TRUE,\n                    includeMarkdown(\"doc/dimReduct.md\")\n                    )\n              ),\n              fluidRow(\n                box(title=\"Author Information\", \n                    status = \"primary\", solidHeader = TRUE,\n                    width=12,\n                    includeMarkdown(\"doc/author.md\"))\n              )\n      )\n      \n      # tabItem(tabName = \"preProc\",\n      #         fluidRow(\n      #           box(\n      #             selectizeInput(\n      #               'preProcessing', 'Preprocessing Options',\n      #               choices = c(\"BoxCox\", \"YeoJohnson\",\n      #                           \"expoTrans\", \"center\",\n      #                           \"scale\", \"spatialSign\",\n      #                           \"range\"),\n      #               selected = c(\"center\", \"scale\"),\n      #               multiple = TRUE),\n      #             actionButton(\"preProcessBtn\", \"PreProcess\")\n      #           ),\n      #           fluidRow(\n      #             verbatimTextOutput(\"preProcMsg\")\n      #           )\n      #         )\n      # )\n    )\n  )\n)\n      \n\nserver <- function(input, output, session) {\n  \n  featureMatrix <- reactive({\n    inFile <- input$featureMatrix\n    \n    if (is.null(inFile))\n      return(NULL)\n    \n    read.csv(inFile$datapath, header = TRUE, \n             sep = \",\", \n             stringsAsFactors = T)\n  })\n  \n  responseVector <- reactive({\n    inFile <- input$responseVector\n    \n    if (is.null(inFile))\n      return(NULL)\n    \n    read.csv(inFile$datapath, header = TRUE, \n             sep = \",\", \n             stringsAsFactors = T)\n  })\n  \n  inputData <- reactive({\n    response <- responseVector()\n    features <- featureMatrix()\n    \n    if (is.null(response))\n      return(NULL)\n\n    if (is.null(features))\n      return(NULL)\n    \n    if (ncol(response) != 1) {\n      createAlert(session, \"alert\", \"inputAlert\", title = \"Warning\",\n                  content = \"Response should be a column vector.\",\n                  style = \"warning\",\n                  append = FALSE)\n    }\n    if (nrow(features) != nrow(response)) {\n      createAlert(session, \"alert\", \"inputAlert\", title = \"Warning\",\n                  content = \"Dimensions of feature matrix and response Vector don't match.\",\n                  style = \"warning\",\n                  append = FALSE)\n    }\n    \n    data <- cbind(features, response)\n    data\n  })\n  \n  selectedSingleFeature <- reactive({\n    input$singleFeature\n  })\n  \n  selectedLabel <- reactive({\n    input$label\n  })\n  \n  selectedMultiFeatures <- reactive({\n    input$multiFeature\n  })\n  \n  output$featureTypePlot <- renderChart({\n    featureTypePlot(inputData())\n  })\n  \n  output$responseClassesPlot <- renderChart({\n    responseClassesPlot(responseVector())\n  })\n  \n  output$violinPlot <- renderPlot({\n    selected   <- selectedMultiFeatures()\n    label      <- selectedLabel()\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    if (is.null(label))\n      return(NULL)\n    \n    data <- inputData()[, c(selected, label)]\n    plotViolins(data, label)\n  })\n  \n  output$featureDistPlot <- renderPlot({\n    selected <- selectedSingleFeature()\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- featureMatrix()\n    x    <- data[, selected]\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    \n    # draw the histogram with the specified number of bins\n    hist(x, breaks = bins, col = 'darkgray', border = 'white', \n         main = paste(\"Histogram of\", selected))\n  })\n  \n  output$skewnessPlot <- renderPlot({\n    selected <- selectedMultiFeatures()\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()[, selected]\n    print(plotSkewness(data))\n  })\n  \n  output$pairsPlot <- renderPlot({\n    selected <- selectedMultiFeatures()\n    condition_1 <- (length(selected) < 2)\n    condition_2 <- (\"factor\" %in% sapply(inputData()[, selected], class))\n    \n    if (condition_1) {\n      createAlert(session, \"alert\", \"correlationAlert\", title = \"Warning\",\n                  content = \"At least two features have to be selected.\", \n                  style = \"warning\",\n                  append = TRUE)\n    }\n    \n    if (condition_2) {\n      createAlert(session, \"alert\", \"correlationAlert_2\", title = \"Warning\",\n                  content = \"Selected features should be numeric.\", \n                  style = \"warning\",\n                  append = TRUE)\n    }\n\n    if (is.null(selected) || condition_1 || condition_2)\n      return(NULL)\n    \n    data <- featureMatrix()[, selected]\n    plotPairs(data)\n  })\n  \n  output$corMatPlot <- renderChart({\n    selected <- selectedMultiFeatures()\n    \n    if (length(selected) < 2) {\n      createAlert(session, \"alert\", \"correlationAlert_2\", title = \"Warning\",\n                  content = \"At least two features have to be selected.\", \n                  append = FALSE, style = \"warning\")\n    }\n    \n    if (is.null(selected) || length(selected) < 2)\n      return(NULL)\n    \n    data <- inputData()[, selected]\n    data <- data[complete.cases(data), ]\n    fig <- plotCorMat(data)\n    fig$addParams(dom = 'corMatPlot')\n    fig\n  })\n  \n  output$qqPlot <- renderPlot({\n    selected <- selectedSingleFeature()\n    data <- inputData()[, selected]\n    \n    if (class(data) == \"factor\") {\n      createAlert(session, \"alert\", \"qqPlotAlert\", title = \"Warning\",\n                  content = \"The selected feature should be numeric\", \n                  append = FALSE, style = \"warning\")\n    }\n    \n    print(qqPlot(data))\n  })\n  \n  # output$dimRed2DPlot <- renderPlotly({\n  #   input$computeDimRedBtn\n  #   selected   <- isolate(selectedMultiFeatures())\n  #   label      <- isolate(selectedLabel())\n  #   \n  #   if (length(selected) < 3) {\n  #     createAlert(session, \"alert\", \"dimRedAlert\", title = \"Warning\",\n  #                 content = \"At least three features have to be selected.\", \n  #                 append = FALSE, style = \"warning\")\n  #   }\n  #   \n  #   if (is.null(selected) || length(selected) < 3)\n  #     return(NULL)\n  #     \n  #   data <- inputData()[, c(selected, label)]\n  # \n  #   fig <- NULL\n  #   \n  #   if (input$dimRedSelect == \"PCA\") {\n  #     fig <- pca2dPlotly(data, label)\n  #   }\n  # \n  #   if (input$dimRedSelect == \"ICA\") {\n  #     fig <- ica2dPlotly(data, label)\n  #   }\n  #   \n  #   return(print(fig))\n  # })\n\n  output$dimRed2DPlot <- renderRbokeh({\n    input$computeDimRedBtn\n    selected   <- isolate(selectedMultiFeatures())\n    label      <- isolate(selectedLabel())\n    \n    if (length(selected) < 3) {\n      createAlert(session, \"alert\", \"dimRedAlert\", title = \"Warning\",\n                  content = \"At least three features have to be selected.\", \n                  append = FALSE, style = \"warning\")\n    }\n    \n    if (is.null(selected) || length(selected) < 3)\n      return(NULL)\n    \n    data <- inputData()[, c(selected, label)]\n    \n    fig <- NULL\n    \n    if (input$dimRedSelect == \"PCA\") {\n      fig <- pca2dPlot(data, label)\n    }\n    \n    if (input$dimRedSelect == \"ICA\") {\n      fig <- ica2dPlot(data, label)\n    }\n    \n    return(print(fig))\n  })\n  \n  output$dimRed3DPlot <- renderPlotly({\n    input$computeDimRedBtn\n    selected   <- isolate(selectedMultiFeatures())\n    label      <- isolate(selectedLabel())\n    \n    if (length(selected) < 3) {\n      createAlert(session, \"alert\", \"dimRed3DAlert\", title = \"Warning\",\n                  content = \"At least three features have to be selected.\", \n                  append = FALSE, style = \"warning\")\n    }\n    \n    if (is.null(selected) || length(selected) < 3)\n      return(NULL)\n    \n    data <- inputData()[, c(selected, label)]\n    \n    fig <- NULL\n    \n    if (input$dimRedSelect == \"PCA\") {\n      fig <- pca3dPlot(data, label)\n    }\n    \n    if (input$dimRedSelect == \"ICA\") {\n      fig <- ica3dPlot(data, label)\n    }\n    return(print(fig))\n  })\n  \n  output$screePlot <-  renderPlotly({\n    input$computeDimRedBtn\n    selected   <- isolate(selectedMultiFeatures())\n    \n    data <- inputData()[, selected]\n    \n    fig <- NULL\n\n    if (input$dimRedSelect == \"PCA\") {\n      fig <- screePlotPCA(data)\n    }\n    return(print(fig))\n  })\n  \n  output$dataTable <- DT::renderDataTable({\n    selected   <- selectedMultiFeatures()\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()[, selected]\n    data\n  }, options = list(pageLength = 25))\n  \n  output$summaryStats <- DT::renderDataTable({\n    selected   <- selectedMultiFeatures()\n    \n    if (is.null(selected))\n      return(NULL)\n    \n    data <- inputData()[, selected]\n    basicStats(data)\n  }, options = list(pageLength = 16))\n  \n  output$singleSelect <- renderUI({\n    data <- inputData()\n    \n    selectInput(\"singleFeature\", \"Select Univariate Feature\", \n                choices = colnames(data))\n  })\n  \n  output$multiSelect <- renderUI({\n    data <- inputData()\n    \n    selectizeInput(\n      'multiFeature', 'Select Multivariate Features',\n      choices = colnames(data),\n      selected = colnames(data)[1:3], ## Fix the NULL issue\n      multiple = TRUE)\n  })\n  \n  output$labelSelect <- renderUI({\n    data <- inputData()\n    \n    selectInput(\"label\", \"Select Label\", \n                choices = colnames(data))\n  })\n  \n  # preProcessEventMsg <- eventReactive(input$preProcessBtn, {\n  #   preProc       <- preProcess(inputData(), method=input$preProcessing)\n  #   procInputData <- reactive({predict(preProc, inputData())})\n  #   msg <- \"Data has been transformed!\"\n  # })\n  # \n  # output$preProcMsg <- renderText({\n  #   preProcessEventMsg()\n  # })\n}\n\nshinyApp(ui, server)",
    "created" : 1460356881674.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "211|29|220|2|\n222|30|231|2|\n233|25|258|2|\n260|37|262|2|\n264|29|266|2|\n268|37|270|2|\n272|41|274|2|\n276|45|278|2|\n280|35|292|2|\n294|40|307|2|\n309|37|317|2|\n319|34|343|2|\n345|36|362|2|\n364|31|375|2|\n435|39|461|2|\n463|37|475|2|\n477|43|485|2|\n487|46|495|2|\n497|35|502|2|\n504|34|512|2|\n",
    "hash" : "3403101224",
    "id" : "FD6E4826",
    "lastKnownWriteTime" : 1460982647,
    "last_content_update" : 1460982647694,
    "path" : "~/workspace/R/projects/ShinyDashboardExample/app.R",
    "project_path" : "app.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}